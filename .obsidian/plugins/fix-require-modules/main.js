/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FixRequireModulesPlugin
});
module.exports = __toCommonJS(main_exports);

// src/FixRequireModulesPlugin.ts
var import_obsidian = require("obsidian");
var import_module = __toESM(require("module"), 1);
var builtInModuleNames = [
  "obsidian",
  "@codemirror/autocomplete",
  "@codemirror/collab",
  "@codemirror/commands",
  "@codemirror/language",
  "@codemirror/lint",
  "@codemirror/search",
  "@codemirror/state",
  "@codemirror/text",
  "@codemirror/view",
  "@lezer/common",
  "@lezer/lr",
  "@lezer/highlight"
];
var FixRequireModulesPlugin = class _FixRequireModulesPlugin extends import_obsidian.Plugin {
  onload() {
    const pluginRequire = require;
    const nodeRequire = window.require;
    const electronRendererModule = window.module;
    const PATH_CACHE_SEPARATOR = "\0";
    const pathCacheKeySuffix = ["", ...electronRendererModule.paths].join(PATH_CACHE_SEPARATOR);
    const ModuleEx = import_module.default;
    for (const builtInModuleName of builtInModuleNames) {
      const builtInModule = pluginRequire(builtInModuleName);
      const pathCacheKey = `${builtInModuleName}${pathCacheKeySuffix}`;
      const fakePath = `${_FixRequireModulesPlugin.name}/${builtInModuleName}`;
      ModuleEx._pathCache[pathCacheKey] = fakePath;
      const moduleWrapper = new ModuleEx(builtInModuleName);
      moduleWrapper.loaded = true;
      moduleWrapper.exports = builtInModule;
      ModuleEx._cache[fakePath] = moduleWrapper;
      this.register(() => {
        delete ModuleEx._pathCache[pathCacheKey];
        delete ModuleEx._cache[fakePath];
        delete nodeRequire.cache[builtInModuleName];
      });
    }
  }
};
